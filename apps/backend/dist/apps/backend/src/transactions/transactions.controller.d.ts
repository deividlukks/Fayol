import { TransactionsService } from './transactions.service';
import { CreateTransactionDto } from './dto/create-transaction.dto';
import { UpdateTransactionDto } from './dto/update-transaction.dto';
import { FilterTransactionDto } from './dto/filter-transaction.dto';
import { TransferDto } from './dto/transfer.dto';
export declare class TransactionsController {
    private readonly transactionsService;
    constructor(transactionsService: TransactionsService);
    create(user: any, createTransactionDto: CreateTransactionDto): Promise<{
        category: {
            id: string;
            name: string;
            createdAt: Date;
            updatedAt: Date;
            type: string;
            icon: string | null;
            color: string | null;
            isSystem: boolean;
            userId: string | null;
            parentId: string | null;
        };
        subcategory: {
            id: string;
            name: string;
            createdAt: Date;
            updatedAt: Date;
            isSystem: boolean;
            userId: string | null;
            categoryId: string;
        };
        account: {
            id: string;
            name: string;
            isActive: boolean;
            createdAt: Date;
            updatedAt: Date;
            type: string;
            userId: string;
            initialBalance: import("@prisma/client/runtime/library").Decimal;
            currency: string;
        };
    } & {
        id: string;
        createdAt: Date;
        updatedAt: Date;
        userId: string;
        categoryId: string;
        description: string | null;
        accountId: string;
        movementType: string;
        launchType: string;
        subcategoryId: string | null;
        amount: import("@prisma/client/runtime/library").Decimal;
        dueDate: Date | null;
        receiptDate: Date | null;
        effectiveDate: Date | null;
        isRecurring: boolean;
        recurrencePeriod: string | null;
        transferId: string | null;
        code: string;
        transferAccountId: string | null;
        isPaused: boolean;
    }>;
    findAll(user: any, filters: FilterTransactionDto): Promise<{
        data: ({
            category: {
                id: string;
                name: string;
                createdAt: Date;
                updatedAt: Date;
                type: string;
                icon: string | null;
                color: string | null;
                isSystem: boolean;
                userId: string | null;
                parentId: string | null;
            };
            subcategory: {
                id: string;
                name: string;
                createdAt: Date;
                updatedAt: Date;
                isSystem: boolean;
                userId: string | null;
                categoryId: string;
            };
            account: {
                id: string;
                name: string;
                isActive: boolean;
                createdAt: Date;
                updatedAt: Date;
                type: string;
                userId: string;
                initialBalance: import("@prisma/client/runtime/library").Decimal;
                currency: string;
            };
        } & {
            id: string;
            createdAt: Date;
            updatedAt: Date;
            userId: string;
            categoryId: string;
            description: string | null;
            accountId: string;
            movementType: string;
            launchType: string;
            subcategoryId: string | null;
            amount: import("@prisma/client/runtime/library").Decimal;
            dueDate: Date | null;
            receiptDate: Date | null;
            effectiveDate: Date | null;
            isRecurring: boolean;
            recurrencePeriod: string | null;
            transferId: string | null;
            code: string;
            transferAccountId: string | null;
            isPaused: boolean;
        })[];
        meta: {
            total: number;
            page: number;
            limit: number;
            totalPages: number;
        };
    }>;
    findOne(id: string, user: any): Promise<{
        category: {
            id: string;
            name: string;
            createdAt: Date;
            updatedAt: Date;
            type: string;
            icon: string | null;
            color: string | null;
            isSystem: boolean;
            userId: string | null;
            parentId: string | null;
        };
        subcategory: {
            id: string;
            name: string;
            createdAt: Date;
            updatedAt: Date;
            isSystem: boolean;
            userId: string | null;
            categoryId: string;
        };
        account: {
            id: string;
            name: string;
            isActive: boolean;
            createdAt: Date;
            updatedAt: Date;
            type: string;
            userId: string;
            initialBalance: import("@prisma/client/runtime/library").Decimal;
            currency: string;
        };
    } & {
        id: string;
        createdAt: Date;
        updatedAt: Date;
        userId: string;
        categoryId: string;
        description: string | null;
        accountId: string;
        movementType: string;
        launchType: string;
        subcategoryId: string | null;
        amount: import("@prisma/client/runtime/library").Decimal;
        dueDate: Date | null;
        receiptDate: Date | null;
        effectiveDate: Date | null;
        isRecurring: boolean;
        recurrencePeriod: string | null;
        transferId: string | null;
        code: string;
        transferAccountId: string | null;
        isPaused: boolean;
    }>;
    update(id: string, user: any, updateTransactionDto: UpdateTransactionDto): Promise<{
        category: {
            id: string;
            name: string;
            createdAt: Date;
            updatedAt: Date;
            type: string;
            icon: string | null;
            color: string | null;
            isSystem: boolean;
            userId: string | null;
            parentId: string | null;
        };
        subcategory: {
            id: string;
            name: string;
            createdAt: Date;
            updatedAt: Date;
            isSystem: boolean;
            userId: string | null;
            categoryId: string;
        };
        account: {
            id: string;
            name: string;
            isActive: boolean;
            createdAt: Date;
            updatedAt: Date;
            type: string;
            userId: string;
            initialBalance: import("@prisma/client/runtime/library").Decimal;
            currency: string;
        };
    } & {
        id: string;
        createdAt: Date;
        updatedAt: Date;
        userId: string;
        categoryId: string;
        description: string | null;
        accountId: string;
        movementType: string;
        launchType: string;
        subcategoryId: string | null;
        amount: import("@prisma/client/runtime/library").Decimal;
        dueDate: Date | null;
        receiptDate: Date | null;
        effectiveDate: Date | null;
        isRecurring: boolean;
        recurrencePeriod: string | null;
        transferId: string | null;
        code: string;
        transferAccountId: string | null;
        isPaused: boolean;
    }>;
    remove(id: string, user: any): Promise<{
        message: string;
    }>;
    effectuate(id: string, user: any): Promise<{
        category: {
            id: string;
            name: string;
            createdAt: Date;
            updatedAt: Date;
            type: string;
            icon: string | null;
            color: string | null;
            isSystem: boolean;
            userId: string | null;
            parentId: string | null;
        };
        subcategory: {
            id: string;
            name: string;
            createdAt: Date;
            updatedAt: Date;
            isSystem: boolean;
            userId: string | null;
            categoryId: string;
        };
        account: {
            id: string;
            name: string;
            isActive: boolean;
            createdAt: Date;
            updatedAt: Date;
            type: string;
            userId: string;
            initialBalance: import("@prisma/client/runtime/library").Decimal;
            currency: string;
        };
    } & {
        id: string;
        createdAt: Date;
        updatedAt: Date;
        userId: string;
        categoryId: string;
        description: string | null;
        accountId: string;
        movementType: string;
        launchType: string;
        subcategoryId: string | null;
        amount: import("@prisma/client/runtime/library").Decimal;
        dueDate: Date | null;
        receiptDate: Date | null;
        effectiveDate: Date | null;
        isRecurring: boolean;
        recurrencePeriod: string | null;
        transferId: string | null;
        code: string;
        transferAccountId: string | null;
        isPaused: boolean;
    }>;
    pause(id: string, user: any): Promise<{
        id: string;
        createdAt: Date;
        updatedAt: Date;
        userId: string;
        categoryId: string;
        description: string | null;
        accountId: string;
        movementType: string;
        launchType: string;
        subcategoryId: string | null;
        amount: import("@prisma/client/runtime/library").Decimal;
        dueDate: Date | null;
        receiptDate: Date | null;
        effectiveDate: Date | null;
        isRecurring: boolean;
        recurrencePeriod: string | null;
        transferId: string | null;
        code: string;
        transferAccountId: string | null;
        isPaused: boolean;
    }>;
    resume(id: string, user: any): Promise<{
        id: string;
        createdAt: Date;
        updatedAt: Date;
        userId: string;
        categoryId: string;
        description: string | null;
        accountId: string;
        movementType: string;
        launchType: string;
        subcategoryId: string | null;
        amount: import("@prisma/client/runtime/library").Decimal;
        dueDate: Date | null;
        receiptDate: Date | null;
        effectiveDate: Date | null;
        isRecurring: boolean;
        recurrencePeriod: string | null;
        transferId: string | null;
        code: string;
        transferAccountId: string | null;
        isPaused: boolean;
    }>;
    transfer(user: any, transferDto: TransferDto): Promise<{
        message: string;
        transfer: {
            from: {
                category: {
                    id: string;
                    name: string;
                    createdAt: Date;
                    updatedAt: Date;
                    type: string;
                    icon: string | null;
                    color: string | null;
                    isSystem: boolean;
                    userId: string | null;
                    parentId: string | null;
                };
                account: {
                    id: string;
                    name: string;
                    isActive: boolean;
                    createdAt: Date;
                    updatedAt: Date;
                    type: string;
                    userId: string;
                    initialBalance: import("@prisma/client/runtime/library").Decimal;
                    currency: string;
                };
            } & {
                id: string;
                createdAt: Date;
                updatedAt: Date;
                userId: string;
                categoryId: string;
                description: string | null;
                accountId: string;
                movementType: string;
                launchType: string;
                subcategoryId: string | null;
                amount: import("@prisma/client/runtime/library").Decimal;
                dueDate: Date | null;
                receiptDate: Date | null;
                effectiveDate: Date | null;
                isRecurring: boolean;
                recurrencePeriod: string | null;
                transferId: string | null;
                code: string;
                transferAccountId: string | null;
                isPaused: boolean;
            };
            to: {
                category: {
                    id: string;
                    name: string;
                    createdAt: Date;
                    updatedAt: Date;
                    type: string;
                    icon: string | null;
                    color: string | null;
                    isSystem: boolean;
                    userId: string | null;
                    parentId: string | null;
                };
                account: {
                    id: string;
                    name: string;
                    isActive: boolean;
                    createdAt: Date;
                    updatedAt: Date;
                    type: string;
                    userId: string;
                    initialBalance: import("@prisma/client/runtime/library").Decimal;
                    currency: string;
                };
            } & {
                id: string;
                createdAt: Date;
                updatedAt: Date;
                userId: string;
                categoryId: string;
                description: string | null;
                accountId: string;
                movementType: string;
                launchType: string;
                subcategoryId: string | null;
                amount: import("@prisma/client/runtime/library").Decimal;
                dueDate: Date | null;
                receiptDate: Date | null;
                effectiveDate: Date | null;
                isRecurring: boolean;
                recurrencePeriod: string | null;
                transferId: string | null;
                code: string;
                transferAccountId: string | null;
                isPaused: boolean;
            };
            amount: number;
        };
    }>;
}
