import { IWhatsAppProvider, IWhatsAppMessage } from '../core/interfaces/whatsapp-provider.interface';
import { MessageType } from '../core/enums/message-type.enum';
import { ApiService } from '../services/api.service';
import { logger } from '../utils/logger';

/**
 * Handler principal de mensagens recebidas
 * 
 * Processa diferentes tipos de mensagens:
 * - Texto: Parser inteligente
 * - √Åudio: Transcri√ß√£o com Whisper
 * - Imagem: OCR para notas fiscais
 * - Comandos: /start, /help, etc
 */
export class MessageHandler {
  private apiService: ApiService;

  constructor() {
    this.apiService = new ApiService();
  }

  /**
   * Handler principal - roteia mensagem para handler espec√≠fico
   */
  async handle(message: IWhatsAppMessage, provider: IWhatsAppProvider): Promise<void> {
    try {
      logger.info(`[MessageHandler] Processando mensagem de ${message.from}`);

      // Envia indicador "digitando..."
      await provider.sendTyping(message.from);

      // Roteamento baseado no tipo de mensagem
      switch (message.type) {
        case MessageType.TEXT:
          await this.handleTextMessage(message, provider);
          break;

        case MessageType.AUDIO:
          await this.handleAudioMessage(message, provider);
          break;

        case MessageType.IMAGE:
          await this.handleImageMessage(message, provider);
          break;

        default:
          await provider.sendTextMessage(
            message.from,
            '‚ö†Ô∏è Tipo de mensagem n√£o suportado. Use texto, √°udio ou imagem.'
          );
      }

      // Para indicador "digitando..."
      await provider.stopTyping(message.from);
    } catch (error) {
      logger.error('[MessageHandler] Erro ao processar mensagem:', error);
      
      await provider.sendTextMessage(
        message.from,
        '‚ùå Desculpe, ocorreu um erro ao processar sua mensagem. Tente novamente.'
      );
    }
  }

  /**
   * Processa mensagens de texto
   */
  private async handleTextMessage(
    message: IWhatsAppMessage,
    provider: IWhatsAppProvider
  ): Promise<void> {
    const text = message.body?.trim();

    if (!text) {
      return;
    }

    // Comandos come√ßam com /
    if (text.startsWith('/')) {
      await this.handleCommand(text, message.from, provider);
      return;
    }

    // Mensagem livre - tenta parser de transa√ß√£o
    await this.handleFreeTextTransaction(text, message.from, provider);
  }

  /**
   * Processa comandos
   */
  private async handleCommand(
    command: string,
    from: string,
    provider: IWhatsAppProvider
  ): Promise<void> {
    const [cmd, ...args] = command.toLowerCase().split(' ');

    switch (cmd) {
      case '/start':
        await this.handleStartCommand(from, provider);
        break;

      case '/help':
      case '/ajuda':
        await this.handleHelpCommand(from, provider);
        break;

      case '/saldo':
        await this.handleBalanceCommand(from, provider);
        break;

      case '/extrato':
        await this.handleStatementCommand(from, provider);
        break;

      case '/relatorio':
        await this.handleReportCommand(from, provider);
        break;

      case '/categorias':
        await this.handleCategoriesCommand(from, provider);
        break;

      default:
        await provider.sendTextMessage(
          from,
          `‚ùì Comando desconhecido: ${cmd}\n\nDigite /ajuda para ver os comandos dispon√≠veis.`
        );
    }
  }

  /**
   * Comando /start
   */
  private async handleStartCommand(from: string, provider: IWhatsAppProvider): Promise<void> {
    const welcomeMessage = `
ü§ñ *Bem-vindo ao Fayol!*

Sou seu assistente financeiro pessoal. Estou aqui para ajudar voc√™ a gerenciar suas finan√ßas de forma simples e eficiente.

üì± *Como usar:*

*1Ô∏è‚É£ Adicionar Transa√ß√£o*
Envie mensagens naturais como:
‚Ä¢ "Gastei 50 reais no almo√ßo"
‚Ä¢ "Recebi sal√°rio de 3000"
‚Ä¢ "Paguei conta de luz 150"

*2Ô∏è‚É£ Comandos √öteis*
‚Ä¢ /saldo - Consultar saldo
‚Ä¢ /extrato - √öltimas transa√ß√µes
‚Ä¢ /relatorio - Relat√≥rio mensal
‚Ä¢ /categorias - Ver categorias

*3Ô∏è‚É£ Outras Formas*
üì∏ Envie foto da nota fiscal
üé§ Grave √°udio descrevendo o gasto

Digite /ajuda para mais informa√ß√µes.

Vamos come√ßar? üöÄ
    `.trim();

    await provider.sendTextMessage(from, welcomeMessage);
  }

  /**
   * Comando /help
   */
  private async handleHelpCommand(from: string, provider: IWhatsAppProvider): Promise<void> {
    const helpMessage = `
üìö *Central de Ajuda - Fayol*

*üí∞ TRANSA√á√ïES*
‚Ä¢ Texto livre: "Gastei 25 no uber"
‚Ä¢ Foto: Envie imagem da nota fiscal
‚Ä¢ √Åudio: Grave descri√ß√£o do gasto

*üìä CONSULTAS*
‚Ä¢ /saldo - Saldo atual
‚Ä¢ /extrato - √öltimas 10 transa√ß√µes
‚Ä¢ /relatorio - Relat√≥rio do m√™s

*üìã CATEGORIAS*
‚Ä¢ /categorias - Listar categorias

*‚öôÔ∏è CONFIGURA√á√ïES*
‚Ä¢ /contas - Ver suas contas
‚Ä¢ /perfil - Dados pessoais

*‚ùì SUPORTE*
‚Ä¢ /ajuda - Esta mensagem
‚Ä¢ /contato - Falar com suporte

Precisa de ajuda? Estou sempre aqui! üòä
    `.trim();

    await provider.sendTextMessage(from, helpMessage);
  }

  /**
   * Comando /saldo
   */
  private async handleBalanceCommand(from: string, provider: IWhatsAppProvider): Promise<void> {
    try {
      const balance = await this.apiService.getBalance();

      let message = `üí∞ *Saldo Total*\n\nR$ ${balance.total.toFixed(2)}\n\n`;
      message += '*Por Conta:*\n';

      balance.accounts.forEach((account) => {
        message += `‚Ä¢ ${account.name}: R$ ${account.balance.toFixed(2)}\n`;
      });

      await provider.sendTextMessage(from, message);
    } catch (error) {
      logger.error('[MessageHandler] Erro ao buscar saldo:', error);
      await provider.sendTextMessage(
        from,
        '‚ùå N√£o foi poss√≠vel buscar seu saldo. Tente novamente mais tarde.'
      );
    }
  }

  /**
   * Comando /extrato
   */
  private async handleStatementCommand(
    from: string,
    provider: IWhatsAppProvider
  ): Promise<void> {
    try {
      const transactions = await this.apiService.getLatestTransactions(10);

      if (transactions.length === 0) {
        await provider.sendTextMessage(
          from,
          'üìã Voc√™ ainda n√£o possui transa√ß√µes registradas.\n\nComece adicionando seu primeiro gasto!'
        );
        return;
      }

      let message = `üìã *√öltimas Transa√ß√µes*\n\n`;

      transactions.forEach((tx: any, index: number) => {
        const icon = tx.movementType === 'income' ? 'üìà' : 'üìâ';
        const sign = tx.movementType === 'income' ? '+' : '-';
        
        message += `${icon} ${tx.description || 'Sem descri√ß√£o'}\n`;
        message += `   ${sign}R$ ${tx.amount.toFixed(2)}\n`;
        message += `   ${new Date(tx.createdAt).toLocaleDateString('pt-BR')}\n\n`;
      });

      await provider.sendTextMessage(from, message);
    } catch (error) {
      logger.error('[MessageHandler] Erro ao buscar extrato:', error);
      await provider.sendTextMessage(
        from,
        '‚ùå N√£o foi poss√≠vel buscar seu extrato. Tente novamente.'
      );
    }
  }

  /**
   * Comando /relatorio
   */
  private async handleReportCommand(from: string, provider: IWhatsAppProvider): Promise<void> {
    try {
      const report = await this.apiService.getMonthlyReport();

      let message = `üìä *Relat√≥rio Mensal*\n\n`;
      message += `üíµ Receitas: R$ ${report.summary.totalIncome.toFixed(2)}\n`;
      message += `üí∏ Despesas: R$ ${report.summary.totalExpense.toFixed(2)}\n`;
      message += `üí∞ Saldo: R$ ${report.summary.netBalance.toFixed(2)}\n\n`;

      if (report.topExpenseCategory) {
        message += `üèÜ *Maior Gasto*\n`;
        message += `${report.topExpenseCategory.name}: R$ ${report.topExpenseCategory.amount.toFixed(2)}\n`;
      }

      await provider.sendTextMessage(from, message);
    } catch (error) {
      logger.error('[MessageHandler] Erro ao gerar relat√≥rio:', error);
      await provider.sendTextMessage(
        from,
        '‚ùå N√£o foi poss√≠vel gerar o relat√≥rio. Tente novamente.'
      );
    }
  }

  /**
   * Comando /categorias
   */
  private async handleCategoriesCommand(
    from: string,
    provider: IWhatsAppProvider
  ): Promise<void> {
    try {
      const categories = await this.apiService.getCategories();

      let message = `üìÅ *Categorias Dispon√≠veis*\n\n`;

      // Agrupa por tipo
      const byType: Record<string, any[]> = {
        income: [],
        expense: [],
        investment: [],
      };

      categories.forEach((cat: any) => {
        byType[cat.type].push(cat);
      });

      // Receitas
      if (byType.income.length > 0) {
        message += `*üíµ RECEITAS*\n`;
        byType.income.forEach((cat: any) => {
          message += `‚Ä¢ ${cat.name}\n`;
        });
        message += '\n';
      }

      // Despesas
      if (byType.expense.length > 0) {
        message += `*üí∏ DESPESAS*\n`;
        byType.expense.forEach((cat: any) => {
          message += `‚Ä¢ ${cat.name}\n`;
        });
        message += '\n';
      }

      // Investimentos
      if (byType.investment.length > 0) {
        message += `*üìà INVESTIMENTOS*\n`;
        byType.investment.forEach((cat: any) => {
          message += `‚Ä¢ ${cat.name}\n`;
        });
      }

      await provider.sendTextMessage(from, message);
    } catch (error) {
      logger.error('[MessageHandler] Erro ao listar categorias:', error);
      await provider.sendTextMessage(
        from,
        '‚ùå N√£o foi poss√≠vel listar as categorias. Tente novamente.'
      );
    }
  }

  /**
   * Processa texto livre como poss√≠vel transa√ß√£o
   */
  private async handleFreeTextTransaction(
    text: string,
    from: string,
    provider: IWhatsAppProvider
  ): Promise<void> {
    // Parser simples (pode ser melhorado com IA)
    const parsed = this.parseTransactionText(text);

    if (!parsed) {
      await provider.sendTextMessage(
        from,
        'ü§î N√£o consegui entender. Tente algo como:\n\n"Gastei 50 reais no supermercado"\n"Recebi sal√°rio de 3000"'
      );
      return;
    }

    // Sugere categoria com IA
    try {
      const suggestion = await this.apiService.suggestCategory(parsed.description);

      // Aqui voc√™ pode implementar confirma√ß√£o interativa
      // Por enquanto, cria a transa√ß√£o diretamente

      await provider.sendTextMessage(
        from,
        `‚úÖ Entendi!\n\nüí∞ Valor: R$ ${parsed.amount.toFixed(2)}\nüìù ${parsed.description}\nüìÅ Categoria: ${suggestion.category}\n\n‚è≥ Criando transa√ß√£o...`
      );

      // TODO: Implementar cria√ß√£o de transa√ß√£o
      // Precisa obter accountId do usu√°rio

    } catch (error) {
      logger.error('[MessageHandler] Erro ao processar transa√ß√£o:', error);
      await provider.sendTextMessage(
        from,
        '‚ùå Erro ao processar transa√ß√£o. Tente novamente.'
      );
    }
  }

  /**
   * Parser b√°sico de texto para transa√ß√£o
   */
  private parseTransactionText(text: string): {
    amount: number;
    description: string;
    type: 'income' | 'expense';
  } | null {
    // Regex para capturar valor
    const valueRegex = /(?:R\$\s*)?(\d+(?:[.,]\d{1,2})?)/;
    const match = text.match(valueRegex);

    if (!match) {
      return null;
    }

    const amount = parseFloat(match[1].replace(',', '.'));

    // Determina tipo (receita ou despesa)
    const incomeKeywords = ['recebi', 'ganhei', 'sal√°rio', 'salario', 'recebimento'];
    const isIncome = incomeKeywords.some((keyword) =>
      text.toLowerCase().includes(keyword)
    );

    // Remove o valor do texto para obter descri√ß√£o
    const description = text.replace(valueRegex, '').trim();

    return {
      amount,
      description: description || 'Sem descri√ß√£o',
      type: isIncome ? 'income' : 'expense',
    };
  }

  /**
   * Processa mensagem de √°udio
   */
  private async handleAudioMessage(
    message: IWhatsAppMessage,
    provider: IWhatsAppProvider
  ): Promise<void> {
    await provider.sendTextMessage(
      message.from,
      'üé§ Transcri√ß√£o de √°udio ainda n√£o implementada.\n\nPor enquanto, use texto ou imagem.'
    );

    // TODO: Implementar transcri√ß√£o com OpenAI Whisper
    // 1. Baixar √°udio: await provider.downloadMedia(message.id)
    // 2. Converter para formato aceito (.mp3, .wav)
    // 3. Enviar para OpenAI Whisper API
    // 4. Processar texto transcrito
  }

  /**
   * Processa mensagem de imagem (nota fiscal)
   */
  private async handleImageMessage(
    message: IWhatsAppMessage,
    provider: IWhatsAppProvider
  ): Promise<void> {
    await provider.sendTextMessage(
      message.from,
      'üì∏ OCR de nota fiscal ainda n√£o implementado.\n\nPor enquanto, use texto descrevendo o gasto.'
    );

    // TODO: Implementar OCR
    // 1. Baixar imagem: await provider.downloadMedia(message.id)
    // 2. Processar com Tesseract.js ou Google Vision API
    // 3. Extrair: valor, estabelecimento, data
    // 4. Criar transa√ß√£o
  }
}
