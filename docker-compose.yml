version: '3.8'

networks:
  fayol-network:
    driver: bridge

services:
  # ======================
  # Infraestrutura
  # ======================
  postgres:
    image: postgres:15-alpine
    container_name: fayol-postgres
    restart: unless-stopped
    ports:
      - '${POSTGRES_PORT:-5432}:5432'
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      POSTGRES_DB: ${POSTGRES_DB:-fayol}
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-fayol}']
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    networks:
      - fayol-network

  redis:
    image: redis:7-alpine
    container_name: fayol-redis
    restart: unless-stopped
    ports:
      - '${REDIS_PORT:-6379}:6379'
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-}
    volumes:
      - redis_data:/data
    healthcheck:
      test: ['CMD', 'redis-cli', '--raw', 'incr', 'ping']
      interval: 10s
      timeout: 3s
      retries: 5
      start_period: 5s
    networks:
      - fayol-network

  # ======================
  # Backend API
  # ======================
  backend:
    build:
      context: .
      dockerfile: ./apps/backend/Dockerfile
      args:
        NODE_ENV: production
    container_name: fayol-backend
    restart: unless-stopped
    ports:
      - '${BACKEND_PORT:-3000}:3000'
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      NODE_ENV: production
      PORT: 3000
      DATABASE_URL: ${DATABASE_URL}
      JWT_SECRET: ${JWT_SECRET}
      JWT_EXPIRES_IN: ${JWT_EXPIRES_IN:-7d}
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-}
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      AI_SERVICE_URL: ${AI_SERVICE_URL:-http://ai-service:8000}
      LOG_LEVEL: ${LOG_LEVEL:-info}
    volumes:
      - backend_logs:/app/apps/backend/logs
    healthcheck:
      test: ['CMD', 'node', '-e', "require('http').get('http://localhost:3000/health', (r) => process.exit(r.statusCode === 200 ? 0 : 1))"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - fayol-network

  # ======================
  # AI Service (Python)
  # ======================
  ai-service:
    build:
      context: .
      dockerfile: ./apps/ai-service/Dockerfile
    container_name: fayol-ai-service
    restart: unless-stopped
    ports:
      - '${AI_SERVICE_PORT:-8000}:8000'
    environment:
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      GEMINI_API_KEY: ${GEMINI_API_KEY:-}
      LOG_LEVEL: ${LOG_LEVEL:-info}
    healthcheck:
      test: ['CMD', 'python', '-c', "import requests; requests.get('http://localhost:8000/health')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    networks:
      - fayol-network

  # ======================
  # Admin Panel (Next.js)
  # ======================
  admin-panel:
    build:
      context: .
      dockerfile: ./apps/admin-panel/Dockerfile
      args:
        NODE_ENV: production
        NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL:-http://localhost:3000}
    container_name: fayol-admin-panel
    restart: unless-stopped
    ports:
      - '${ADMIN_PORT:-3001}:3001'
    depends_on:
      backend:
        condition: service_healthy
    environment:
      NODE_ENV: production
      PORT: 3001
      NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL:-http://backend:3000}
    healthcheck:
      test: ['CMD', 'node', '-e', "require('http').get('http://localhost:3001/', (r) => process.exit(r.statusCode === 200 ? 0 : 1))"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    networks:
      - fayol-network

  # ======================
  # WhatsApp Bot
  # ======================
  whatsapp-bot:
    build:
      context: ./apps/whatsapp-bot
      dockerfile: Dockerfile
    container_name: fayol-whatsapp-bot
    restart: unless-stopped
    ports:
      - '${WHATSAPP_BOT_PORT:-3002}:3002'
    depends_on:
      backend:
        condition: service_healthy
    environment:
      NODE_ENV: production
      SERVER_PORT: 3002
      API_URL: ${API_URL:-http://backend:3000}
      WEBHOOK_URL: ${WHATSAPP_WEBHOOK_URL:-}
      USE_TWILIO: ${USE_TWILIO:-false}
      TWILIO_ACCOUNT_SID: ${TWILIO_ACCOUNT_SID:-}
      TWILIO_AUTH_TOKEN: ${TWILIO_AUTH_TOKEN:-}
      TWILIO_PHONE_NUMBER: ${TWILIO_PHONE_NUMBER:-}
      LOG_LEVEL: ${LOG_LEVEL:-info}
    volumes:
      - whatsapp_sessions:/app/sessions
      - whatsapp_logs:/app/logs
    healthcheck:
      test: ['CMD', 'node', '-e', "require('http').get('http://localhost:3002/health', (r) => process.exit(r.statusCode === 200 ? 0 : 1))"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 10s
    networks:
      - fayol-network

  # ======================
  # Telegram Bot (opcional)
  # ======================
  # telegram-bot:
  #   build:
  #     context: ./apps/telegram-bot
  #     dockerfile: Dockerfile
  #   container_name: fayol-telegram-bot
  #   restart: unless-stopped
  #   depends_on:
  #     backend:
  #       condition: service_healthy
  #   environment:
  #     NODE_ENV: production
  #     API_URL: ${API_URL:-http://backend:3000}
  #     TELEGRAM_BOT_TOKEN: ${TELEGRAM_BOT_TOKEN}
  #     LOG_LEVEL: ${LOG_LEVEL:-info}
  #   volumes:
  #     - telegram_logs:/app/logs
  #   networks:
  #     - fayol-network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  backend_logs:
    driver: local
  whatsapp_sessions:
    driver: local
  whatsapp_logs:
    driver: local
  # telegram_logs:
  #   driver: local
